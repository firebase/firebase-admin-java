package com.google.firebase.internal;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Object utility methods.
 *
 * <p>Copied (and extended) from the version present in Ice Cream Sandwich+.
 *
 * @hide
 */
public final class Objects {

  private Objects() {
    throw new AssertionError("Uninstantiable");
  }

  /**
   * Determines whether two possibly-null objects are equal. Returns:
   *
   * <ul>
   *   <li>{@code true} if {@code a} and {@code b} are both null.
   *   <li>{@code true} if {@code a} and {@code b} are both non-null and they are equal according to
   *       {@link Object#equals(Object)}.
   *   <li>{@code false} in all other situations.
   * </ul>
   *
   * <p>This assumes that any non-null objects passed to this function conform to the {@code
   * equals()} contract.
   */
  public static boolean equal(@Nullable Object obj1, @Nullable Object obj2) {
    return obj1 == obj2 || (obj1 != null && obj1.equals(obj2));
  }

  /**
   * Generates a hash code for multiple values. The hash code is generated by calling {@link
   * Arrays#hashCode(Object[])}.
   *
   * <p>This is useful for implementing {@link Object#hashCode()}. For example, in an object that
   * has three properties, {@code x}, {@code y}, and {@code z}, one could write:
   *
   * <pre>
   * public int hashCode() {
   *     return Objects.hashCode(getX(), getY(), getZ());
   * }
   * </pre>
   *
   * <b>Warning</b>: When a single object is supplied, the returned hash code does not equal the
   * hash code of that object.
   */
  public static int hashCode(Object... objects) {
    return Arrays.hashCode(objects);
  }

  /**
   * Creates an instance of {@link ToStringHelper}.
   *
   * <p>This is helpful for implementing {@link Object#toString()}. For example, in an object that
   * contains two member variables {@code x}, and {@code y}, one could write:
   *
   * <pre>
   * <tt>
   *   public class ClassName {
   *     public String toString() {
   *       return Objects.toStringHelper(this)
   *           .add("x", x)
   *           .add("y", y)
   *           .toString();
   *     }
   *   }</tt>
   * </pre>
   *
   * <p>Assuming the values of {@code x} and {@code y} are 1 and 2, this code snippet returns the
   * string <tt>"ClassName{x=1, y=2}"</tt>.
   */
  public static ToStringHelper toStringHelper(Object object) {
    return new ToStringHelper(object);
  }

  /** 
   * Support class for {@link Objects#toStringHelper}.
   */
  public static final class ToStringHelper {

    private final List<String> fieldStrings;
    private final Object instance;

    /** 
     * Use {@link Objects#toStringHelper(Object)} to create an instance.
     */
    private ToStringHelper(Object instance) {
      this.instance = Preconditions.checkNotNull(instance);
      fieldStrings = new ArrayList<>();
    }

    /**
     * Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}
     * is {@code null}, the string {@code "null"} is used.
     */
    public ToStringHelper add(String name, Object value) {
      fieldStrings.add(Preconditions.checkNotNull(name) + "=" + String.valueOf(value));
      return this;
    }

    /**
     * Adds a string value pair to the formatted output. If {@code value} is {@code null}, the
     * string {@code "null"} is used.
     */
    public ToStringHelper addValue(Object value) {
      fieldStrings.add(String.valueOf(value));
      return this;
    }

    /** Returns the formatted string. */
    @Override
    public String toString() {
      StringBuilder builder =
          new StringBuilder(100).append(instance.getClass().getSimpleName()).append('{');

      int numFields = fieldStrings.size();
      for (int i = 0; i < numFields; i++) {
        builder.append(fieldStrings.get(i));
        if (i < (numFields - 1)) {
          builder.append(", ");
        }
      }
      return builder.append('}').toString();
    }
  }
}
